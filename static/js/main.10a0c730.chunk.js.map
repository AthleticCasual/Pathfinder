{"version":3,"sources":["Pathfinder/Node/Node.jsx","Algorithms/dijkstra.js","Pathfinder/Pathfinder.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","props","state","row","col","isStart","isEnd","isWall","this","className","id","getId","onMouseDown","onMouseEnter","onMouseUp","Component","dijkstra","grid","start","end","unvisited","node","push","getAllNodes","distance","visited","length","sort","nodeA","nodeB","currentNode","shift","Infinity","isVisited","updateNeighbors","neighbors","filter","neighbor","getNeighbors","prevNode","Pathfinder","mousePressed","reset","getInitialGrid","setState","currentRow","createNode","pathInOrder","i","setTimeout","document","getElementById","disabled","classList","add","textContent","animatePath","animateVisited","newGrid","toggle","resetGrid","randomGrid","Math","floor","random","remove","class","onClick","visualizeDijkstra","randomPattern","map","index","key","mouseDown","mouseEnter","mouseUp","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.10a0c730.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./Node.css\";\r\n\r\nexport default class Node extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      row: props.row,\r\n      col: props.col,\r\n      isStart: props.isStart,\r\n      isEnd: props.isEnd,\r\n      isWall: props.isWall,\r\n    };\r\n  }\r\n\r\n  getClass() {\r\n    if (this.state.isStart) {\r\n      return \"node-start\";\r\n    } else if (this.state.isEnd) {\r\n      return \"node-end\";\r\n    } else if (this.state.isWall) {\r\n      return \"node-wall\";\r\n    } else {\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n  getId() {\r\n    return this.state.row + \",\" + this.state.col;\r\n  }\r\n\r\n  render() {\r\n    let { row, col } = this.state;\r\n    // let className = () => {\r\n    //   if (this.state.isStart) {\r\n    //     return \"node-start\";\r\n    //   } else if (this.state.isEnd) {\r\n    //     return \"node-end\";\r\n    //   } else if (this.state.isWall) {\r\n    //     return \"node-wall\";\r\n    //   } else {\r\n    //     return \"\";\r\n    //   }\r\n    // };\r\n\r\n    let className = this.state.isEnd\r\n      ? \"node-end\"\r\n      : this.state.isStart\r\n      ? \"node-start\"\r\n      : this.state.isWall\r\n      ? \"node-wall\"\r\n      : \"\";\r\n\r\n    return (\r\n      <div\r\n        id={this.getId()}\r\n        className={`node ${className}`}\r\n        onMouseDown={() => this.props.onMouseDown(row, col)}\r\n        onMouseEnter={() => this.props.onMouseEnter(row, col)}\r\n        onMouseUp={() => this.props.onMouseUp()}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n","/**\r\n * This is Dijkstra's algorithm\r\n */\r\n\r\nexport function dijkstra(grid, start, end) {\r\n  let unvisited = getAllNodes(grid);\r\n  start.distance = 0;\r\n  let visited = [];\r\n  while (!!unvisited.length) {\r\n    unvisited.sort(function (nodeA, nodeB) {\r\n      return nodeA.distance - nodeB.distance;\r\n    });\r\n    let currentNode = unvisited.shift();\r\n    if (currentNode.isWall) {\r\n      continue;\r\n    }\r\n    if (currentNode.distance === Infinity) {\r\n      return visited;\r\n    }\r\n    currentNode.isVisited = true;\r\n    visited.push(currentNode);\r\n    if (currentNode === end) {\r\n      return visited;\r\n    }\r\n    updateNeighbors(grid, currentNode);\r\n  }\r\n  return visited;\r\n}\r\n\r\nfunction updateNeighbors(grid, node) {\r\n  let neighbors = getNeighbors(grid, node);\r\n  for (let neighbor of neighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.prevNode = node;\r\n  }\r\n}\r\n\r\nfunction getNeighbors(grid, node) {\r\n  let neighbors = [];\r\n  let row = node.row;\r\n  let col = node.col;\r\n  if (row > 0) {\r\n    neighbors.push(grid[row - 1][col]);\r\n  }\r\n  if (col > 0) {\r\n    neighbors.push(grid[row][col - 1]);\r\n  }\r\n  if (row < grid.length - 1) {\r\n    neighbors.push(grid[row + 1][col]);\r\n  }\r\n  if (col < grid[0].length - 1) {\r\n    neighbors.push(grid[row][col + 1]);\r\n  }\r\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  let unvisited = [];\r\n  for (let row of grid) {\r\n    for (let node of row) {\r\n      unvisited.push(node);\r\n    }\r\n  }\r\n  return unvisited;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./Node/Node\";\r\nimport { dijkstra } from \"../Algorithms/dijkstra\";\r\n\r\nimport \"./Pathfinder.css\";\r\n\r\nconst ROWS = 20;\r\nconst COLS = 50;\r\n\r\nconst START_ROW = 10;\r\nconst START_COL = 10;\r\nconst END_ROW = 10;\r\nconst END_COL = 39;\r\n\r\nexport default class Pathfinder extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: [],\r\n      mousePressed: false,\r\n      reset: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    let grid = this.getInitialGrid();\r\n    this.setState({ grid });\r\n  }\r\n\r\n  createNode(row, col) {\r\n    let node = {\r\n      row,\r\n      col,\r\n      isStart: row === START_ROW && col === START_COL,\r\n      isEnd: row === END_ROW && col === END_COL,\r\n      isVisited: false,\r\n      distance: Infinity,\r\n      prevNode: null,\r\n      isWall: false,\r\n    };\r\n    return node;\r\n  }\r\n\r\n  getInitialGrid() {\r\n    let grid = [];\r\n    for (let row = 0; row < ROWS; row++) {\r\n      let currentRow = [];\r\n      for (let col = 0; col < COLS; col++) {\r\n        currentRow.push(this.createNode(row, col));\r\n      }\r\n      grid.push(currentRow);\r\n    }\r\n    return grid;\r\n  }\r\n\r\n  getId(node) {\r\n    return node.row + \",\" + node.col;\r\n  }\r\n\r\n  animatePath(pathInOrder) {\r\n    for (let i = 0; i <= pathInOrder.length; i++) {\r\n      if (i === pathInOrder.length) {\r\n        setTimeout(() => {\r\n          document.getElementById(\"reset-btn\").disabled = false;\r\n        }, 25 * i);\r\n      } else {\r\n        setTimeout(() => {\r\n          document.getElementById(pathInOrder[i]).classList.add(\"path\");\r\n        }, 25 * i);\r\n      }\r\n    }\r\n  }\r\n\r\n  animateVisited(visited, pathInOrder) {\r\n    for (let i = 0; i <= visited.length; i++) {\r\n      if (i === visited.length) {\r\n        if (!visited[i - 1].isEnd) {\r\n          document.getElementById(\"message\").textContent = \"No Path Found\";\r\n        }\r\n        setTimeout(() => {\r\n          this.animatePath(pathInOrder);\r\n        }, 15 * i);\r\n      } else {\r\n        setTimeout(function () {\r\n          let id = visited[i].row + \",\" + visited[i].col;\r\n          document.getElementById(id).classList.add(\"visited\");\r\n        }, 15 * i);\r\n      }\r\n    }\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    document.getElementById(\"dijkstra-btn\").disabled = true;\r\n    document.getElementById(\"random-btn\").disabled = true;\r\n    document.getElementById(\"reset-btn\").disabled = true;\r\n    let { grid } = this.state;\r\n    let start = grid[START_ROW][START_COL];\r\n    let end = grid[END_ROW][END_COL];\r\n    let visited = dijkstra(grid, start, end);\r\n    let node = visited[visited.length - 1];\r\n    let pathInOrder = [];\r\n    if (node === grid[END_ROW][END_COL]) {\r\n      while (node.prevNode !== null) {\r\n        let id = node.row + \",\" + node.col;\r\n        pathInOrder.push(id);\r\n        node = node.prevNode;\r\n      }\r\n    }\r\n    this.animateVisited(visited, pathInOrder);\r\n  }\r\n\r\n  mouseDown(row, col) {\r\n    this.setState({ mousePressed: true });\r\n    let newGrid = this.state.grid;\r\n    let node = newGrid[row][col];\r\n    if (!node.isStart && !node.isEnd) {\r\n      node.isWall = !node.isWall;\r\n      let gridNode = document.getElementById(row + \",\" + col);\r\n      gridNode.classList.toggle(\"node-wall\");\r\n      this.setState({ grid: newGrid });\r\n    }\r\n  }\r\n\r\n  mouseEnter(row, col) {\r\n    if (this.state.mousePressed) {\r\n      let newGrid = this.state.grid;\r\n      let node = newGrid[row][col];\r\n      if (!node.isStart && !node.isEnd) {\r\n        node.isWall = true;\r\n        let gridNode = document.getElementById(row + \",\" + col);\r\n        gridNode.classList.add(\"node-wall\");\r\n        this.setState({ grid: newGrid });\r\n      }\r\n    }\r\n  }\r\n\r\n  mouseUp() {\r\n    this.setState({ mousePressed: false });\r\n  }\r\n\r\n  randomPattern() {\r\n    this.resetGrid();\r\n    document.getElementById(\"random-btn\").disabled = true;\r\n    let randomGrid = this.state.grid;\r\n    for (let row of randomGrid) {\r\n      for (let node of row) {\r\n        let num = Math.floor(Math.random() * Math.floor(3));\r\n        if (num === 0 && !node.isStart && !node.isEnd) {\r\n          node.isWall = true;\r\n          document.getElementById(node.row + \",\" + node.col).classList.add(\"node-wall\");\r\n        }\r\n      }\r\n    }\r\n    this.setState({ grid: randomGrid });\r\n  }\r\n\r\n  resetGrid() {\r\n    let grid = this.state.grid;\r\n    for (let row of grid) {\r\n      for (let node of row) {\r\n        let currentNode = document.getElementById(node.row + \",\" + node.col);\r\n        currentNode.classList.remove(\"visited\");\r\n        currentNode.classList.remove(\"path\");\r\n        currentNode.classList.remove(\"node-wall\");\r\n      }\r\n    }\r\n    this.setState({ grid: this.getInitialGrid() });\r\n    document.getElementById(\"dijkstra-btn\").disabled = false;\r\n    document.getElementById(\"random-btn\").disabled = false;\r\n    document.getElementById(\"message\").textContent = \"\";\r\n  }\r\n\r\n  render() {\r\n    let { grid } = this.state;\r\n\r\n    return (\r\n      <main>\r\n        <h1>Pathfinder Visualizer</h1>\r\n        <p id=\"message\"></p>\r\n        <button id=\"dijkstra-btn\" class=\"button\" onClick={() => this.visualizeDijkstra()}>\r\n          Visualize Dijkstra's\r\n        </button>\r\n        <button id=\"reset-btn\" class=\"button\" onClick={() => this.resetGrid()}>\r\n          Reset\r\n        </button>\r\n        <button id=\"random-btn\" class=\"button\" onClick={() => this.randomPattern()}>\r\n          Random Pattern\r\n        </button>\r\n        <div id=\"grid\" className=\"grid\">\r\n          {grid.map((row, index) => {\r\n            return (\r\n              <div key={index} class=\"row\">\r\n                {row.map((node, index) => {\r\n                  return (\r\n                    <Node\r\n                      key={index}\r\n                      row={node.row}\r\n                      col={node.col}\r\n                      isStart={node.isStart}\r\n                      isEnd={node.isEnd}\r\n                      isWall={node.isWall}\r\n                      mousePressed={this.state.mousePressed}\r\n                      onMouseDown={(row, col) => this.mouseDown(row, col)}\r\n                      onMouseEnter={(row, col) => this.mouseEnter(row, col)}\r\n                      onMouseUp={() => this.mouseUp()}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Pathfinder from \"./Pathfinder/Pathfinder\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Pathfinder></Pathfinder>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}