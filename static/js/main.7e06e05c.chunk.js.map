{"version":3,"sources":["Pathfinder/Node/Node.jsx","Algorithms/dijkstra.js","Pathfinder/Pathfinder.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","props","state","row","col","isStart","isEnd","isWall","this","className","id","getId","onMouseDown","onMouseLeave","onMouseEnter","onMouseUp","Component","dijkstra","grid","start","end","unvisited","node","push","getAllNodes","distance","visited","length","sort","nodeA","nodeB","currentNode","shift","Infinity","isVisited","updateNeighbors","neighbors","filter","neighbor","getNeighbors","prevNode","Pathfinder","mousePressed","startPressed","endPressed","reset","getInitialGrid","setState","currentRow","createNode","pathInOrder","i","setTimeout","document","getElementById","disabled","classList","add","textContent","animatePath","animateVisited","newGrid","toggle","randomGrid","Math","floor","random","remove","class","onClick","visualizeDijkstra","resetGrid","randomPattern","map","index","key","mouseDown","mouseLeave","mouseEnter","mouseUp","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7e06e05c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./Node.css\";\r\n\r\nexport default class Node extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      row: props.row,\r\n      col: props.col,\r\n      isStart: props.isStart,\r\n      isEnd: props.isEnd,\r\n      isWall: props.isWall,\r\n    };\r\n  }\r\n\r\n  getClass() {\r\n    if (this.state.isStart) {\r\n      return \"node-start\";\r\n    } else if (this.state.isEnd) {\r\n      return \"node-end\";\r\n    } else if (this.state.isWall) {\r\n      return \"node-wall\";\r\n    } else {\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n  getId() {\r\n    return this.state.row + \",\" + this.state.col;\r\n  }\r\n\r\n  render() {\r\n    let { row, col } = this.state;\r\n    // let className = () => {\r\n    //   if (this.state.isStart) {\r\n    //     return \"node-start\";\r\n    //   } else if (this.state.isEnd) {\r\n    //     return \"node-end\";\r\n    //   } else if (this.state.isWall) {\r\n    //     return \"node-wall\";\r\n    //   } else {\r\n    //     return \"\";\r\n    //   }\r\n    // };\r\n\r\n    let className = this.state.isEnd\r\n      ? \"node-end\"\r\n      : this.state.isStart\r\n      ? \"node-start\"\r\n      : this.state.isWall\r\n      ? \"node-wall\"\r\n      : \"\";\r\n\r\n    return (\r\n      <div\r\n        id={this.getId()}\r\n        className={`node ${className}`}\r\n        onMouseDown={() => this.props.onMouseDown(row, col)}\r\n        onMouseLeave={() => this.props.onMouseLeave(row, col)}\r\n        onMouseEnter={() => this.props.onMouseEnter(row, col)}\r\n        onMouseUp={() => this.props.onMouseUp()}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n","/**\r\n * This is Dijkstra's algorithm\r\n */\r\n\r\nexport function dijkstra(grid, start, end) {\r\n  let unvisited = getAllNodes(grid);\r\n  start.distance = 0;\r\n  let visited = [];\r\n  while (!!unvisited.length) {\r\n    unvisited.sort(function (nodeA, nodeB) {\r\n      return nodeA.distance - nodeB.distance;\r\n    });\r\n    let currentNode = unvisited.shift();\r\n    if (currentNode.isWall) {\r\n      continue;\r\n    }\r\n    if (currentNode.distance === Infinity) {\r\n      return visited;\r\n    }\r\n    currentNode.isVisited = true;\r\n    visited.push(currentNode);\r\n    if (currentNode === end) {\r\n      return visited;\r\n    }\r\n    updateNeighbors(grid, currentNode);\r\n  }\r\n  return visited;\r\n}\r\n\r\nfunction updateNeighbors(grid, node) {\r\n  let neighbors = getNeighbors(grid, node);\r\n  for (let neighbor of neighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.prevNode = node;\r\n  }\r\n}\r\n\r\nfunction getNeighbors(grid, node) {\r\n  let neighbors = [];\r\n  let row = node.row;\r\n  let col = node.col;\r\n  if (row > 0) {\r\n    neighbors.push(grid[row - 1][col]);\r\n  }\r\n  if (col > 0) {\r\n    neighbors.push(grid[row][col - 1]);\r\n  }\r\n  if (row < grid.length - 1) {\r\n    neighbors.push(grid[row + 1][col]);\r\n  }\r\n  if (col < grid[0].length - 1) {\r\n    neighbors.push(grid[row][col + 1]);\r\n  }\r\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  let unvisited = [];\r\n  for (let row of grid) {\r\n    for (let node of row) {\r\n      unvisited.push(node);\r\n    }\r\n  }\r\n  return unvisited;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./Node/Node\";\r\nimport { dijkstra } from \"../Algorithms/dijkstra\";\r\n\r\nimport \"./Pathfinder.css\";\r\n\r\nconst ROWS = 20;\r\nconst COLS = 50;\r\n\r\nconst START_ROW = 10;\r\nconst START_COL = 10;\r\nconst END_ROW = 10;\r\nconst END_COL = 39;\r\n\r\nexport default class Pathfinder extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: [],\r\n      mousePressed: false,\r\n      startPressed: false,\r\n      endPressed: false,\r\n      reset: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    let grid = this.getInitialGrid();\r\n    this.setState({ grid });\r\n  }\r\n\r\n  createNode(row, col) {\r\n    let node = {\r\n      row,\r\n      col,\r\n      isStart: row === START_ROW && col === START_COL,\r\n      isEnd: row === END_ROW && col === END_COL,\r\n      isVisited: false,\r\n      distance: Infinity,\r\n      prevNode: null,\r\n      isWall: false,\r\n    };\r\n    return node;\r\n  }\r\n\r\n  getInitialGrid() {\r\n    let grid = [];\r\n    for (let row = 0; row < ROWS; row++) {\r\n      let currentRow = [];\r\n      for (let col = 0; col < COLS; col++) {\r\n        currentRow.push(this.createNode(row, col));\r\n      }\r\n      grid.push(currentRow);\r\n    }\r\n    return grid;\r\n  }\r\n\r\n  getId(node) {\r\n    return node.row + \",\" + node.col;\r\n  }\r\n\r\n  animatePath(pathInOrder) {\r\n    for (let i = 0; i <= pathInOrder.length; i++) {\r\n      if (i === pathInOrder.length) {\r\n        setTimeout(() => {\r\n          document.getElementById(\"reset-btn\").disabled = false;\r\n        }, 25 * i);\r\n      } else {\r\n        setTimeout(() => {\r\n          document.getElementById(pathInOrder[i]).classList.add(\"path\");\r\n        }, 25 * i);\r\n      }\r\n    }\r\n  }\r\n\r\n  animateVisited(visited, pathInOrder) {\r\n    for (let i = 0; i <= visited.length; i++) {\r\n      if (i === visited.length) {\r\n        if (!visited[i - 1].isEnd) {\r\n          document.getElementById(\"message\").textContent = \"No Path Found\";\r\n        }\r\n        setTimeout(() => {\r\n          this.animatePath(pathInOrder);\r\n        }, 15 * i);\r\n      } else {\r\n        setTimeout(function () {\r\n          let id = visited[i].row + \",\" + visited[i].col;\r\n          document.getElementById(id).classList.add(\"visited\");\r\n        }, 15 * i);\r\n      }\r\n    }\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    document.getElementById(\"dijkstra-btn\").disabled = true;\r\n    document.getElementById(\"random-btn\").disabled = true;\r\n    document.getElementById(\"reset-btn\").disabled = true;\r\n    let { grid } = this.state;\r\n    let start = grid[START_ROW][START_COL];\r\n    let end = grid[END_ROW][END_COL];\r\n    let visited = dijkstra(grid, start, end);\r\n    let node = visited[visited.length - 1];\r\n    let pathInOrder = [];\r\n    if (node === grid[END_ROW][END_COL]) {\r\n      while (node.prevNode !== null) {\r\n        let id = node.row + \",\" + node.col;\r\n        pathInOrder.push(id);\r\n        node = node.prevNode;\r\n      }\r\n    }\r\n    this.animateVisited(visited, pathInOrder);\r\n  }\r\n\r\n  mouseDown(row, col) {\r\n    let newGrid = this.state.grid;\r\n    let node = newGrid[row][col];\r\n    if (!node.isStart && !node.isEnd) {\r\n      node.isWall = !node.isWall;\r\n      let gridNode = document.getElementById(row + \",\" + col);\r\n      gridNode.classList.toggle(\"node-wall\");\r\n      this.setState({ grid: newGrid });\r\n      // } else if (node.isStart) {\r\n      //   this.setState({ startPressed: true });\r\n      // } else if (node.isEnd) {\r\n      //   this.setState({ endPressed: true });\r\n    }\r\n    this.setState({ mousePressed: true });\r\n  }\r\n\r\n  mouseLeave(row, col) {\r\n    let newGrid = this.state.grid;\r\n    // let node = newGrid[row][col];\r\n    // if (this.state.mousePressed) {\r\n    //   if (node.isStart) {\r\n    //     node.isStart = false;\r\n    //   } else if (node.isEnd) {\r\n    //     node.isEnd = false;\r\n    //   }\r\n    // }\r\n    this.setState({ grid: newGrid });\r\n  }\r\n\r\n  mouseEnter(row, col) {\r\n    let newGrid = this.state.grid;\r\n    let node = newGrid[row][col];\r\n    if (this.state.mousePressed) {\r\n      if (!node.isStart && !node.isEnd && !this.state.startPressed && !this.state.endPressed) {\r\n        node.isWall = true;\r\n        let gridNode = document.getElementById(row + \",\" + col);\r\n        gridNode.classList.add(\"node-wall\");\r\n        this.setState({ grid: newGrid });\r\n        // } else if (this.state.startPressed) {\r\n        //   node.isStart = true;\r\n        // } else if (this.state.endPressed) {\r\n        //   node.isEnd = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  mouseUp() {\r\n    this.setState({ mousePressed: false, startPressed: false, endPressed: false });\r\n  }\r\n\r\n  randomPattern() {\r\n    document.getElementById(\"random-btn\").disabled = true;\r\n    let randomGrid = this.state.grid;\r\n    for (let row of randomGrid) {\r\n      for (let node of row) {\r\n        let num = Math.floor(Math.random() * Math.floor(3));\r\n        if (num === 0 && !node.isStart && !node.isEnd) {\r\n          node.isWall = true;\r\n          document.getElementById(node.row + \",\" + node.col).classList.add(\"node-wall\");\r\n        }\r\n      }\r\n    }\r\n    this.setState({ grid: randomGrid });\r\n  }\r\n\r\n  resetGrid() {\r\n    let grid = this.state.grid;\r\n    for (let row of grid) {\r\n      for (let node of row) {\r\n        let currentNode = document.getElementById(node.row + \",\" + node.col);\r\n        currentNode.classList.remove(\"visited\");\r\n        currentNode.classList.remove(\"path\");\r\n        currentNode.classList.remove(\"node-wall\");\r\n      }\r\n    }\r\n    this.setState({ grid: this.getInitialGrid() });\r\n    document.getElementById(\"dijkstra-btn\").disabled = false;\r\n    document.getElementById(\"random-btn\").disabled = false;\r\n    document.getElementById(\"message\").textContent = \"\";\r\n  }\r\n\r\n  render() {\r\n    let { grid } = this.state;\r\n\r\n    return (\r\n      <main>\r\n        <h1>Pathfinder Visualizer</h1>\r\n        <p id=\"message\"></p>\r\n        <button id=\"dijkstra-btn\" class=\"button\" onClick={() => this.visualizeDijkstra()}>\r\n          Visualize Dijkstra's\r\n        </button>\r\n        <button id=\"reset-btn\" class=\"button\" onClick={() => this.resetGrid()}>\r\n          Reset\r\n        </button>\r\n        <button id=\"random-btn\" class=\"button\" onClick={() => this.randomPattern()}>\r\n          Random Pattern\r\n        </button>\r\n        <div id=\"grid\" className=\"grid\">\r\n          {grid.map((row, index) => {\r\n            return (\r\n              <div key={index}>\r\n                {row.map((node, index) => {\r\n                  return (\r\n                    <Node\r\n                      key={index}\r\n                      row={node.row}\r\n                      col={node.col}\r\n                      isStart={node.isStart}\r\n                      isEnd={node.isEnd}\r\n                      isWall={node.isWall}\r\n                      mousePressed={this.state.mousePressed}\r\n                      onMouseDown={(row, col) => this.mouseDown(row, col)}\r\n                      onMouseLeave={(row, col) => this.mouseLeave(row, col)}\r\n                      onMouseEnter={(row, col) => this.mouseEnter(row, col)}\r\n                      onMouseUp={() => this.mouseUp()}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Pathfinder from \"./Pathfinder/Pathfinder\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Pathfinder></Pathfinder>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}